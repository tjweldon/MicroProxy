#!/usr/bin/env python3
import config
import history
import requests

import utils

crlf = "\r\n"
tab = " " * 4
quote = "\""


def _format_lines(raw: str):
    def _format(line):
        return tab * 2 + "f" + quote * 3 + line + quote * 3 + ","

    return [_format(line) for line in raw.split(crlf)]


def create_template(request: history.RequestRecord) -> str:
    """
    creates a template and returns its path
    :param request:
    :return:
    """
    raw = request.raw(history.Parts.ALL)
    template_path = config.TEMPLATE_PATH + "template.py"
    template = (
        """# Autogenerated by snipe.py""",
        """""",
        """""",
        """def render(data) -> str:""",
        """    template = (""",
        *_format_lines(raw),
        """    )""",
        """""",
        """    return template""",
    )

    with open(template_path, "w+") as file:
        file.write(crlf.join(template))

    return template_path


if __name__ == "__main__":
    repo = history.RequestRepo.create(storage_type=history.JSON)
    latest = repo.get_latest()
    create_template(latest.request)
    try:
        from templates.template import render
        parsed = utils.parse_lines((s.encode() for s in render(None)))
        raw = crlf.join(render(None))
        print(raw + "\n"*5)
        print("-"*30)
        print(requests.request(**parsed).text)
    except ImportError:
        print("couldn't import template")
        exit(1)

